1 webview 内存泄漏
  首先在布局文件中声明一个parent布局

<LinearLayout    
    android:id="@+id/web_view"   
    android:layout_width="match_parent"    
    android:layout_height="wrap_content"
    android:orientation="horizontal"   
    android:scrollbars="none" />
然后在代码中，把WebView当做其子View添加进去

WebView webView = new WebView(context);
webViewLayout.addView(webView);
网上很多人说这个context应该用application的，我觉得是不对的，如果你的WebView需要弹出一个dialog呢？还有其他的不可预估的问题的，最好还是用当前的activity的Context是最合适的。
上面说的是如何把WebView添加进来进行使用，然后到底它有哪些属性是我们在开发中需要使用到的呢？

webView.loadUrl("www.baidu.com");//WebView加载的网页使用loadUrl
WebSettings webSettings = webView.getSettings();//获得WebView的设置
webSettings.setUseWideViewPort(true);// 设置此属性，可任意比例缩放
webSettings.setLoadWithOverviewMode(true);//适配
webSettings.setJavaScriptEnabled(true);  //支持js
webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);  //设置 缓存模式
webSettings.setDomStorageEnabled(true);// 开启 DOM storage API 功能
webSettings.setDatabaseEnabled(true);//开启 database storage API 功能
webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);//HTTPS，注意这个是在LOLLIPOP以上才调用的
webSettings.setAppCacheEnabled(true);//开启 Application Caches 功能
webSettings.setBlockNetworkImage(true);//关闭加载网络图片，在一开始加载的时候可以设置为true，当加载完网页的时候再设置为false
上面是使用WebView中最基础的设置，相信在开发过程中都会进行如上的设置的。

webView.setWebChromeClient(new WebChromeClient() {    
     @Override   
     public void onProgressChanged(WebView view, int newProgress) {
         //加载的进度
     }
     @Override
     public void onReceivedTitle(WebView view, String title) {   
         //获取WebView的标题
     }
    @Override
    public boolean onJsAlert(WebView view, String url, String message, final JsResult result) {    
        return super.onJsAlert(view, url, message, result);
        //Js 弹框
    }
    @Override
    public boolean onJsConfirm(WebView view, String url, String message, final JsResult result) {   
        AlertDialog.Builder b = new AlertDialog.Builder(IllegalQueryActivity.this);    
        b.setTitle("删除");    
        b.setMessage(message);    
        b.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {        
            @Override        
            public void onClick(DialogInterface dialog, int which) {            
                result.confirm();        
            }    
        });    
        b.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {        
            @Override        
            public void onClick(DialogInterface dialog, int which) {            
                result.cancel();        
            }    
        });    
        b.create().show();    
        return true;
    }
});
webView.setWebViewClient(new WebViewClient() {    
    @Override    
    public boolean shouldOverrideUrlLoading(WebView view, String url) {        
       //需要设置在当前WebView中显示网页，才不会跳到默认的浏览器进行显示
       return true;   
    }    
    @Override    
    public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
        super.onReceivedError(view, request, error);
        //加载出错了
    }   
    @Override    
    public void onPageFinished(WebView view, String url) {        
        super.onPageFinished(view, url);
        //加载完成
    }
});
webView.setDownloadListener(new DownLoadListener());//下载监听
private class DownLoadListener implements DownloadListener {   
    @Override   
    public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {      

    }
}
然后就是WebView跟JS的交互了

webView.addJavascriptInterface(new WebAppInterface(this), "WebJs");
public class WebAppInterface { 
    Context mContext;    
    public WebAppInterface(Context c) {        
        mContext = c;    
    }    
    @JavascriptInterface    
    public void method() {
    }
}
webView.loadUrl("javascript:jsMethod()");//这是WebView最简单的调用JS的方法
当activity执行生命周期的时候，这里需要注意的是在onDestroy的时候，需要销毁WebView，不然也会出现内存泄漏的。

@Overrideprotected void onPause() {    
    super.onPause();    
    if (webView != null) {        
        webView.onPause();    
    }
}
@Override
protected void onResume() {    
    super.onResume();    
    if (webView != null) {        
        webView.onResume();    
    }
}
@Override
protected void onDestroy() {        
    if (webView != null) {        
        webView.clearCache(true); //清空缓存   
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {            
            if (webViewLayout != null) {                
                webViewLayout.removeView(webView);            
            }            
        webView.removeAllViews();            
        webView.destroy();        
    }else {            
        webView.removeAllViews();            
        webView.destroy();            
        if (webViewLayout != null) {                
            webViewLayout.removeView(webView);           
        }        
     }  
     webView = null;    
  }   
}
可以看到上面的onDestroy方法中对系统的版本进行了判断，那是因为我在不同的版本中进行了测试，如果低于5.0版本的WebView中，如果先在parent中remove了WebView，那WebView将无法进行destroy了，这样就会造成内存的泄漏，下来你们可以自己去尝试一下这个说法是不是正确的。

2 webview加载有些页面空白
webView = new MyWebView(this);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
        llwebView.addView(webView,params);

3 压缩图片 先设置bitmap属性，位图颜色方式，大小等。再进行质量压缩。这样不会失真的太严重。
private String compressImage(String filepath) {
        try {
            InputStream is = new FileInputStream(filepath);
            BitmapFactory.Options opts = new BitmapFactory.Options();
            opts.inTempStorage = new byte[100 * 1024];
            // 3.设置位图颜色显示优化方式
            opts.inPreferredConfig = Bitmap.Config.RGB_565;
            // 4.设置图片可以被回收，创建Bitmap用于存储Pixel的内存空间在系统内存不足时可以被回收
            opts.inPurgeable = true;
            // 5.设置位图缩放比例
            // width，hight设为原来的四分一（该参数请使用2的整数倍）,这也减小了位图占用的内存大小；
            opts.inSampleSize = 4;
            // 6.设置解码位图的尺寸信息
            opts.inInputShareable = true;
            // 7.解码位图
            Bitmap image = BitmapFactory.decodeStream(is, null, opts);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.JPEG, 100, baos);
            int options = 100;
            while (baos.toByteArray().length / 1024 > 100) {    //循环判断如果压缩后图片是否大于100kb,大于继续压缩
                baos.reset();//重置baos即清空baos
                options -= 5;//每次都减少
                image.compress(Bitmap.CompressFormat.JPEG, options, baos);//这里压缩options%，把压缩后的数据存放到baos中
            }
            //压缩好后写入文件中
            FileOutputStream fos = new FileOutputStream(filepath);
            fos.write(baos.toByteArray());
            fos.flush();
            fos.close();
            return filepath;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    4 Android studio error
    Write access is allowed from event dispatch thread only
    So the problem was concluded in that android studio conflicted with my installed jdk version, so it was resolved when i checked jdk location (File -> Project Structure -> SDK Location), ticked 'Use embedded JDK' checkbox and set jdk location to 'path to android studio'\Android Studio\jre

    5 android studio 找不到符号 getContext()
    导入了android-support-v4.jar包，导致AndroidStudio引用了错误的类，删除该包，完美解决

    6 android.view.inflateexception binary xml file line
    自定义view
    总之抛出这种异常的原因有可能是必须实现的构造器没有实现：

	须实现三个构造函数
    public GalleryFlow(Context context) {
            super(context);
    }

    public GalleryFlow(Context context, AttributeSet attrs) {
            super(context, attrs);
    }

    public GalleryFlow(Context context, AttributeSet attrs, int defStyle) {
            super(context, attrs, defStyle);
    }

    7 D:\androidstudio\jx_zhenedun4>adb shell getprop ro.product.cpu.abi
      arm64-v8a

      
    8ConstraintLayout一行配置两个组件的时候，如果都是wrap_content，那么第一个如果太长就会把第二个挤掉，解决方法如下：
•<TextView
    android:id=“@+id/titleView”
    android:layout_width=“0dp”  必须指定宽度为0，使得第一个textview自适应
    android:layout_height=“wrap_content”
    android:layout_marginLeft=“@dimen/job_detail_left_padding”
    android:layout_marginStart=“@dimen/job_detail_left_padding”
    android:layout_marginTop=“16dp”
    android:ellipsize=“end”  
    android:gravity=“center_vertical”
    android:maxLines=“1”
    android:text=”我是很长很长很长很长很长很长很长很长很长的一段文字“
    android:textColor=”#1A1A1A“
    android:textSize=”18sp“
    android:paddingRight=”9dp“
    card_view:layout_constraintHorizontal_bias=”0.0“这个主要是使得该view中文字靠左显示
    card_view:layout_constraintLeft_toLeftOf=”parent“ 需要同时指定左侧和右侧链
    card_view:layout_constraintRight_toLeftOf=”@+id/updateTimeView“
    card_view:layout_constraintTop_toTopOf="parent"/>

<TextView
    android:id="@+id/updateTimeView"
    android:layout_width="wrap_content" 必须是wrap_content，否则会把第一个TextView挤压掉
    android:layout_height="wrap_content"
    android:text=”我在后边不想被挤掉"
    android:textColor="#B3B3B3"
    android:textSize="@dimen/text_size_12sp"
    card_view:layout_constraintRight_toRightOf="parent"
    android:layout_marginRight="@dimen/job_detail_right_padding"
    card_view:layout_constraintLeft_toLeftOf="@+id/titleView"需要指定左侧链
    android:layout_marginLeft="8dp"
    card_view:layout_constraintBaseline_toBaselineOf="@+id/titleView"
    android:layout_marginEnd="@dimen/job_detail_right_padding"
    card_view:layout_constraintHorizontal_bias="1.0" />这个主要是使得该view中文字靠右显示
